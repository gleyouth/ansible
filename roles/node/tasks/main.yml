---
- name: Create working directory
  file: dest={{ k8s_work_dir }}/{{ item }} state=directory
  with_items: 
    - bin
    - cfg
    - ssl
    - logs

- name: Create cni plugin directory
  file: dest={{ item }} state=directory
  with_items: 
    - /opt/cni/bin
    - /etc/cni/net.d

- name: Create temporary directory
  file: dest={{ tem_dir }} state=directory

- name: Distribute and unzip kubernetes binary package
  unarchive: src={{ item }} dest={{ tem_dir }}
  with_fileglob: 
    - "{{ software_dir }}/kubernetes/kubernetes-*.tar.gz"

- name: Distribute and unzip cni plugin binary package
  unarchive: src={{ item }} dest=/opt/cni/bin
  with_fileglob: 
    - "{{ software_dir }}/cni/cni-plugin-*.tgz"

- name: Mobile k8s_node binary file
  shell: cp -rf {{ tem_dir }}/kubernetes/server/bin/{kubelet,kube-proxy} {{ k8s_work_dir }}/bin

- name: Distribute k8s certs
  copy: src=k8s_cert/{{ item }} dest={{ k8s_work_dir }}/ssl
  with_items: 
    - ca.pem
    - kube-proxy.pem
    - kube-proxy-key.pem

- name: Distribute k8s configuration file 
  template: src={{ item }} dest={{ k8s_work_dir }}/cfg/{{ item.split('.')[:-1]|join('.') }}
  with_items: 
    - bootstrap.kubeconfig.j2
    - kubelet.conf.j2
    - kubelet-config.yml.j2
    - kube-proxy.kubeconfig.j2
    - kube-proxy.conf.j2
    - kube-proxy-config.yml.j2

- name: Distribute service file
  template: src={{ item }} dest=/usr/lib/systemd/system/{{ item.split('.')[:-1]|join('.') }}
  with_items: 
    - kubelet.service.j2
    - kube-proxy.service.j2

- name: Start k8s_node components
  systemd: name={{ item }} state=restarted enabled=yes daemon_reload=yes
  with_items: 
    - kubelet
    - kube-proxy

- name: Distribute pre-prepared images
  copy: src={{ software_dir }}/images/image.tar.gz dest={{ tem_dir }}

- name: Import image
  shell: cd {{ tem_dir }} && \
         tar zxf image.tar.gz && \
         for image in $(ls *.tar);do docker load < $image;done
